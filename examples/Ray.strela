// Copyright (c) 2018 Stephan Unverwerth
// This code is licensed under MIT license (See LICENSE for details)

module Examples.Ray {
    import Std.IO.*;
    import Std.Collections.List;
    import Std.Math.Lina.*;
    import Std.cstdio.*;
    import Std.Math.*;

    class TGA {
        var file: File;
        
        function init(name: String, width: int, height: int) {
            this.file = new File(name, "wb");
            this.file.write(0 as u8); // no id
            this.file.write(0 as u8); // no palette
            this.file.write(2 as u8); // 24 bit rgb
            this.file.write(0 as u16); // palette begin
            this.file.write(0 as u16); // palette length
            this.file.write(0 as u8); // palette entry size
            this.file.write(0 as u16); // x begin
            this.file.write(0 as u16); // y begin
            this.file.write(width as u16); // width
            this.file.write(height as u16); // height
            this.file.write(24 as u8); // bpp
            this.file.write(32 as u8); // attrib bits (32 = top to bottom)
        }

        function pixel(color: Vec) {
            var r: u8;
            var g: u8;
            var b: u8;

            if (color.x > 1.0) r = 255;
            else if (color.x < 0.0) r = 0;
            else r = color.x * 255.0;

            if (color.y > 1.0) g = 255;
            else if (color.y < 0.0) g = 0;
            else g = color.y * 255;

            if (color.z > 1.0) b = 255;
            else if (color.z < 0.0) b = 0;
            else b = color.z * 255;

            this.file.write(b);
            this.file.write(g);
            this.file.write(r);
        }
    }

    class Material {
        var color: Vec;
        var roughness: f64;
        var reflectivity: f64;

        function init(color: Vec, roughness: f64, reflectivity: f64) {
            this.color = color;
            this.roughness = roughness;
            this.reflectivity = reflectivity;
        }
    }

    class Plane {
        var position: Vec;
        var normal: Vec;
        var material: Material;

        function init(position: Vec, normal: Vec, material: Material) {
            this.position = position;
            this.normal = normal;
            this.material = material;
        }

        function trace(ray: Ray, hit: Hit) {
            var pn = this.normal;

            var d = (this.position - ray.origin).dot(pn) / ray.direction.dot(pn);
            if (d > 0.0 && d < hit.distance) {
                hit.distance = d;
                hit.position = ray.origin + ray.direction * d;
                hit.normal = pn;
                hit.material = this.material;
            }
        }

        function isBehind(p: Vec): bool {
            return (this.position - p).dot(this.normal) > 0.0;
        }
    }

    class Sphere {
        var center: Vec;
        var radius: f64;
        var material: Material;

        function init(center: Vec, radius: f64, material: Material) {
            this.center = center;
            this.radius = radius;
            this.material = material;
        }

        function trace(ray: Ray, hit: Hit) {
            var oc = ray.origin - this.center;

            var a = ray.direction.dot(oc);
            a = a * a - oc.dot(oc) + this.radius * this.radius;

            if (a > 0.0) {
                var d = -ray.direction.dot(oc) - sqrt(a);

                if (d > 0.0 && d < hit.distance) {
                    hit.distance = d;
                    hit.position = ray.origin + ray.direction * d;
                    hit.normal = (hit.position - this.center) / this.radius;
                    hit.material = this.material;
                }
            }
        }
    }

    class Polyhedron {
        var planes: List<Plane>;
        var material: Material;

        function init() {
            this.planes = new List<Plane>;
        }

        function trace(ray: Ray, hit: Hit) {
            var i = 0;
            var myhit = new Hit;
            myhit.distance = hit.distance;
            while (i < this.planes.length) {
                this.planes[i].trace(ray, myhit);
                if (myhit.distance < hit.distance) {
                    var count = 1;
                    var j = 0;
                    while (j < this.planes.length) {
                        if (j != i && this.planes[j].isBehind(myhit.position)) {
                            count++;
                        }
                        j++;
                    }
                    if (count == this.planes.length) {
                        hit.distance = myhit.distance;
                        hit.position = myhit.position;
                        hit.normal = myhit.normal;
                        hit.material = myhit.material;
                        return;
                    }
                }
                i++;
            }
        }
    }

    class Ray {
        var origin: Vec;
        var direction: Vec;

        function init(origin: Vec, direction: Vec) {
            this.origin = origin;
            this.direction = direction;
        }
    }

    class Hit {
        var position: Vec;
        var normal: Vec;
        var material: Material;
        var distance: f64;
    }

    class Tracer {
        var spheres: List<Sphere>;
        var planes: List<Plane>;
        var polyhedrons: List<Polyhedron>;
        var file: TGA;
        var width: int;
        var height: int;

        function init() {
            this.polyhedrons = new List<Polyhedron>;

            this.planes = new List<Plane>();
            this.planes.append(new Plane(new Vec(-20, 0, 20), (new Vec(1, 0, -1)).normalized(), new Material(new Vec(0, 0, 0), 0.05, 0.75) ));

            this.spheres = new List<Sphere>();
            this.spheres.append(new Sphere(new Vec(5, 5, 5), 5, new Material(new Vec(0, 0, 0), 0.0, 1.0)));
            this.spheres.append(new Sphere(new Vec(5, -5, 10), 5, new Material(new Vec(1, 0, 0), 0.0, 0.8)));
            this.spheres.append(new Sphere(new Vec(-6, 6, 15), 5, new Material(new Vec(0, 1, 0), 0.1, 0.6)));
            this.spheres.append(new Sphere(new Vec(-6, -5, 20), 5, new Material(new Vec(0, 0, 1), 0.0, 0.4)));
            
            this.width = 64;
            this.height = 48;
            this.file = new TGA("out.tga", this.width, this.height);
            print("Initialized image with ");
            print(this.width);
            print("x");
            print(this.height);
            println(" pixels.");
        }

        function trace(ray: Ray, recurse: int): Vec {
            var hit = new Hit;
            hit.distance = 100000.0;

            var i = 0;
            var numObj = this.spheres.length;
            while (i < numObj) {
                this.spheres[i].trace(ray, hit);
                i++;
            }

            i = 0;
            numObj = this.planes.length;
            while (i < numObj) {
                this.planes[i].trace(ray, hit);
                i++;
            }

            i = 0;
            numObj = this.polyhedrons.length;
            while (i < numObj) {
                this.polyhedrons[i].trace(ray, hit);
                i++;
            }

            if (hit.distance < 100000) {
                var mat = hit.material;
                if (recurse < 15 && hit.material.reflectivity > 0.0) {
                    var rough = mat.roughness;
                    var n2 = (hit.normal + new Vec(frand()*rough, frand()*rough, frand()*rough)).normalized();
                    var r = reflect(ray.direction, n2);
                    return lerp(mat.color * clamp(n2.y), this.trace(new Ray(hit.position + r * 0.0001, r), recurse + 1), mat.reflectivity);
                }
                else {
                    return mat.color * clamp(hit.normal.y);
                }
            }

            if (ray.direction.y < 0) {
                var v = ray.direction.y * 0.4;
                return new Vec(0.4 + v, 0.3 + v, 0.1);
            }
            else {
                var v = ray.direction.y * 0.8;
                return new Vec(0.4 + v, 0.4 + v, 0.7 + v * 0.2);
            }
        }

        function run() {
            var x: u32 = 0;
            var y: u32 = 0;
            var dir = new Vec;
            var origin = new Vec(0, 0, 0);

            var hw = this.width * 0.5;
            var hh = this.height * 0.5;

            while (y < this.height) {
                while (x < this.width) {
                    var color = new Vec(0, 0, 0);
                    
                    var num: i32 = 0;

                    var ix = -2;
                    var iy = -2;
                    while (iy < 3) {
                        while (ix < 3) {
                            dir.x = x + ix * 0.4 - hw;
                            dir.y = -(y + iy * 0.4 - hh);
                            dir.z = this.width * 0.3;
                            dir.normalize();
                            color = color + this.trace(new Ray(origin, dir), 0);
                            num++;
                            ix++;
                        }
                        ix = -1;
                        iy++;
                    }

                    this.file.pixel(color * (1.0 / num));
                    x++;
                }
                x = 0;
                y++;
                println(y);
            }

            println("Fin");
        }
    }

    function main(args: String[]): int {
        var tracer = new Tracer;
        tracer.run();

        return 0;
    }
}