// Copyright (c) 2018 Stephan Unverwerth
// This code is licensed under MIT license (See LICENSE for details)

module Std.Math.Lina {
    
    import Std.cstdio.*;

    export class Vec {
        var x: f64;
        var y: f64;
        var z: f64;

        function init() {}

        function init(x: f64, y: f64, z: f64) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        function set(other: Vec) {
            x = other.x;
            y = other.y;
            z = other.z;
        }

        function magnitude(): f64 {
            return sqrt(x * x + y * y + z * z);
        }

        function normalize() {
            var ol = 1.0 / magnitude();
            x = x * ol;
            y = y * ol;
            z = z * ol;
        }

        function dot(other: Vec): f64 {
            return x * other.x + y * other.y + z * other.z;
        }

        function -(other: Vec): Vec {
            return new Vec(x - other.x, y - other.y, z - other.z);
        }

        function +(other: Vec): Vec {
            return new Vec(x + other.x, y + other.y, z + other.z);
        }

        function *(v: f64): Vec {
            return new Vec(x * v, y * v, z * v);
        }

        function /(v: f64): Vec {
            return new Vec(x / v, y / v, z / v);
        }

        function neg(): Vec {
            return new Vec(-x, -y, -z);
        }

        function normalized(): Vec {
            var ol = 1.0 / magnitude();
            return new Vec(x * ol, y * ol, z * ol);
        }

        function +=(other: Vec) {
            x = x + other.x;
            y = y + other.y;
            z = z + other.z;
        }

        function -=(other: Vec) {
            x = x - other.x;
            y = y - other.y;
            z = z - other.z;
        }

        function *=(v: f64) {
            x = x * v;
            y = y * v;
            z = z * v;
        }
    }

    export function reflect(dir: Vec, n: Vec): Vec {
        return dir - n * dir.dot(n) * 2.0;
    }

    export function lerp(a: Vec, b: Vec, f: f64): Vec {
        return a * (1.0 - f) + b * f;
    }
}