// Copyright (c) 2018 Stephan Unverwerth
// This code is licensed under MIT license (See LICENSE for details)

module Std.Net {
    import Std.csockets;
    import Std.cstdio.*;

    export class IPAddr {
        var a: u8;
        var b: u8;
        var c: u8;
        var d: u8;

        function init(a: u8, b: u8, c: u8, d: u8) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
        }

        function getInt(): u32 {
            var i: u32 = d + c * 256 + b * 65536 + a * 16777216;
            return i;
        }
    }

    /*
    AF_UNIX		1
    AF_INET		2
    AF_INET6	10
    */

    export class Socket {
        var handle: i32;

        function init(s: i32) {
            handle = s;
        }

        function init(ip: u32, port: u16) {
            handle = csockets.socket(2, 1, 0);
            bind(ip, port);
        }

        function init() {
            handle = csockets.socket(2, 1, 0);
        }

        function connect(ip: u32, port: u16) {
            var addr = new csockets.sockaddr_in;
            addr.family = 2;
            addr.addr = csockets.htonl(ip);
            addr.port = csockets.htons(port);
            csockets.connect(handle, addr, 16);
        }

        function readLine(): String {
            var str = "";
            var tmp = "" + 60;
            while (tmp != "\n" && csockets.recv(handle, tmp, 1, 0) > 0) {
                str = str + tmp;
            }
            return str;
        }

        function write(str: String) {
            csockets.send(handle, str, strlen(str), 16384); //MSG_NOPIPE
        }

        function bind(ip: u32, port: u16) {
            var addr = new csockets.sockaddr_in;
            addr.family = 2;
            addr.addr = csockets.htonl(ip);
            addr.port = csockets.htons(port);

            csockets.bind(handle, addr, 16);
        }

        function listen() {
            csockets.listen(handle, 1);
        }

        function accept(): Socket {
            var addr = new csockets.sockaddr_in;
            var len: u32 = 0;
            var newsock = csockets.accept(handle, addr, len);
            return new Socket(newsock);
        }

        function shutdown() {
            csockets.shutdown(handle, 0);
        }

        function close() {
            csockets.close(handle);
        }
    }
}