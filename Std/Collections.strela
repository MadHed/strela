module Std.Collections {
    /**
     * Contiguous storage resizable list
     */
    export class List<T> {
        var array: T[];
        var length: int;

        function init() {
            this.array = new T[](1);
            this.length = 0;
        }

        function append(value: T) {
            var newArray = new T[](this.array.length + 1);
            var i = 0;
            while(i < this.array.length) {
                newArray[i] = this.array[i];
                i = i + 1;
            }
            this.array = newArray;
            this.array[this.length] = value;
            this.length = this.length + 1;
        }

        function set(index: int, value: T) {
            this.array[index] = value;
        }

        function [](i: int): T {
            return this.array[i];
        }
    }

    /**
     * Key-Value storage
     */
    export class Map<K, V> {
        var keys: List<K>;
        var values: List<V>;

        function init() {
            this.keys = new List<K>;
            this.values = new List<V>;
        }

        function has(key: K): bool {
            return this.keyIndex(key) >= 0;
        }

        function keyIndex(key: K): i64 {
            var i: u64 = 0;
            while (i < this.keys.length) {
                if (this.keys[i] == key) return i;
                i += 1;
            }
            return -1;
        }

        function set(key: K, val: V) {
            var idx = this.keyIndex(k);
            if (idx >= 0) {
                this.values[idx] = v;
            }
            else {
                this.keys.append(k);
                this.values.append(v);
            }
        }

        function [](key: K): V {
            return this.values(this.keyIndex(kex));
        }
    }
}