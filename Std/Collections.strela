// Copyright (c) 2018 Stephan Unverwerth
// This code is licensed under MIT license (See LICENSE for details)

module Std.Collections {
    /**
     * Contiguous storage resizable list
     */
    export class List<T> {
        var array: T[];
        var length: int;

        function init() {
            array = new T[](1);
            length = 0;
        }

        function append(value: T) {
            if (array.length < length + 1) {
                var newArray = new T[](array.length * 2);
                var i = 0;
                while(i < array.length) {
                    newArray[i] = array[i];
                    i = i + 1;
                }
                array = newArray;
            }
            
            array[length] = value;
            length = length + 1;
        }

        function set(index: int, value: T) {
            array[index] = value;
        }

        function [](i: int): T {
            return array[i];
        }
    }

    /**
     * Key-Value storage
     */
    export class Map<K, V> {
        var keys: List<K>;
        var values: List<V>;

        function init() {
            keys = new List<K>;
            values = new List<V>;
        }

        function has(key: K): bool {
            return keyIndex(key) >= 0;
        }

        function keyIndex(key: K): int {
            var i: int = 0;
            while (i < keys.length) {
                if (keys[i] == key) return i;
                i = i + 1;
            }
            return -1;
        }

        function set(key: K, val: V) {
            var idx = keyIndex(key);
            if (idx >= 0) {
                values.set(idx, val);
            }
            else {
                keys.append(key);
                values.append(val);
            }
        }

        function [](key: K): V {
            return values[keyIndex(key)];
        }
    }
}